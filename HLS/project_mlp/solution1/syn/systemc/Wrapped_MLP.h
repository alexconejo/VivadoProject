// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Wrapped_MLP_HH_
#define _Wrapped_MLP_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "MLP.h"
#include "Wrapped_MLP_pixels.h"
#include "Wrapped_MLP_CONTROL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32>
struct Wrapped_MLP : public sc_module {
    // Port declarations 29
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > INPUT_STREAM_TDATA;
    sc_in< sc_logic > INPUT_STREAM_TVALID;
    sc_out< sc_logic > INPUT_STREAM_TREADY;
    sc_in< sc_lv<4> > INPUT_STREAM_TKEEP;
    sc_in< sc_lv<4> > INPUT_STREAM_TSTRB;
    sc_in< sc_lv<4> > INPUT_STREAM_TUSER;
    sc_in< sc_lv<1> > INPUT_STREAM_TLAST;
    sc_in< sc_lv<5> > INPUT_STREAM_TID;
    sc_in< sc_lv<5> > INPUT_STREAM_TDEST;
    sc_in< sc_logic > s_axi_CONTROL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_ADDR_WIDTH> > s_axi_CONTROL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CONTROL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH> > s_axi_CONTROL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH/8> > s_axi_CONTROL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CONTROL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_ADDR_WIDTH> > s_axi_CONTROL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CONTROL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CONTROL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH> > s_axi_CONTROL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CONTROL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CONTROL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CONTROL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CONTROL_BUS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    Wrapped_MLP(sc_module_name name);
    SC_HAS_PROCESS(Wrapped_MLP);

    ~Wrapped_MLP();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Wrapped_MLP_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>* Wrapped_MLP_CONTROL_BUS_s_axi_U;
    Wrapped_MLP_pixels* pixels_U;
    MLP* grp_MLP_fu_113;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > INPUT_STREAM_data_V_0_data_out;
    sc_signal< sc_logic > INPUT_STREAM_data_V_0_vld_in;
    sc_signal< sc_logic > INPUT_STREAM_data_V_0_vld_out;
    sc_signal< sc_logic > INPUT_STREAM_data_V_0_ack_in;
    sc_signal< sc_logic > INPUT_STREAM_data_V_0_ack_out;
    sc_signal< sc_lv<32> > INPUT_STREAM_data_V_0_payload_A;
    sc_signal< sc_lv<32> > INPUT_STREAM_data_V_0_payload_B;
    sc_signal< sc_logic > INPUT_STREAM_data_V_0_sel_rd;
    sc_signal< sc_logic > INPUT_STREAM_data_V_0_sel_wr;
    sc_signal< sc_logic > INPUT_STREAM_data_V_0_sel;
    sc_signal< sc_logic > INPUT_STREAM_data_V_0_load_A;
    sc_signal< sc_logic > INPUT_STREAM_data_V_0_load_B;
    sc_signal< sc_lv<2> > INPUT_STREAM_data_V_0_state;
    sc_signal< sc_logic > INPUT_STREAM_data_V_0_state_cmp_full;
    sc_signal< sc_logic > INPUT_STREAM_dest_V_0_vld_in;
    sc_signal< sc_logic > INPUT_STREAM_dest_V_0_ack_out;
    sc_signal< sc_lv<2> > INPUT_STREAM_dest_V_0_state;
    sc_signal< sc_logic > INPUT_STREAM_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_fu_130_p2;
    sc_signal< sc_lv<10> > i_1_fu_136_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<10> > pixels_address0;
    sc_signal< sc_logic > pixels_ce0;
    sc_signal< sc_logic > pixels_we0;
    sc_signal< sc_lv<32> > pixels_d0;
    sc_signal< sc_lv<32> > pixels_q0;
    sc_signal< sc_logic > grp_MLP_fu_113_ap_start;
    sc_signal< sc_logic > grp_MLP_fu_113_ap_done;
    sc_signal< sc_logic > grp_MLP_fu_113_ap_idle;
    sc_signal< sc_logic > grp_MLP_fu_113_ap_ready;
    sc_signal< sc_lv<10> > grp_MLP_fu_113_pixels_address0;
    sc_signal< sc_logic > grp_MLP_fu_113_pixels_ce0;
    sc_signal< sc_lv<8> > grp_MLP_fu_113_ap_return;
    sc_signal< sc_lv<10> > i_reg_102;
    sc_signal< sc_logic > grp_MLP_fu_113_ap_start_reg;
    sc_signal< bool > ap_block_state2_ignore_call0;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > tmp_s_fu_142_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_lv<8> > ap_return;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<10> ap_const_lv10_310;
    static const sc_lv<10> ap_const_lv10_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_INPUT_STREAM_TDATA_blk_n();
    void thread_INPUT_STREAM_TREADY();
    void thread_INPUT_STREAM_data_V_0_ack_in();
    void thread_INPUT_STREAM_data_V_0_ack_out();
    void thread_INPUT_STREAM_data_V_0_data_out();
    void thread_INPUT_STREAM_data_V_0_load_A();
    void thread_INPUT_STREAM_data_V_0_load_B();
    void thread_INPUT_STREAM_data_V_0_sel();
    void thread_INPUT_STREAM_data_V_0_state_cmp_full();
    void thread_INPUT_STREAM_data_V_0_vld_in();
    void thread_INPUT_STREAM_data_V_0_vld_out();
    void thread_INPUT_STREAM_dest_V_0_ack_out();
    void thread_INPUT_STREAM_dest_V_0_vld_in();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state2();
    void thread_ap_block_state2_ignore_call0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_exitcond_fu_130_p2();
    void thread_grp_MLP_fu_113_ap_start();
    void thread_i_1_fu_136_p2();
    void thread_pixels_address0();
    void thread_pixels_ce0();
    void thread_pixels_d0();
    void thread_pixels_we0();
    void thread_tmp_s_fu_142_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
