// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Wrapped_MLP.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Wrapped_MLP::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Wrapped_MLP::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> Wrapped_MLP::ap_ST_fsm_state1 = "1";
const sc_lv<3> Wrapped_MLP::ap_ST_fsm_state2 = "10";
const sc_lv<3> Wrapped_MLP::ap_ST_fsm_state3 = "100";
const sc_lv<32> Wrapped_MLP::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Wrapped_MLP::ap_const_lv1_0 = "0";
const sc_lv<1> Wrapped_MLP::ap_const_lv1_1 = "1";
const sc_lv<2> Wrapped_MLP::ap_const_lv2_0 = "00";
const sc_lv<2> Wrapped_MLP::ap_const_lv2_2 = "10";
const sc_lv<2> Wrapped_MLP::ap_const_lv2_3 = "11";
const sc_lv<2> Wrapped_MLP::ap_const_lv2_1 = "1";
const sc_lv<32> Wrapped_MLP::ap_const_lv32_1 = "1";
const int Wrapped_MLP::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<10> Wrapped_MLP::ap_const_lv10_0 = "0000000000";
const sc_lv<32> Wrapped_MLP::ap_const_lv32_2 = "10";
const sc_lv<10> Wrapped_MLP::ap_const_lv10_310 = "1100010000";
const sc_lv<10> Wrapped_MLP::ap_const_lv10_1 = "1";
const bool Wrapped_MLP::ap_const_boolean_1 = true;

Wrapped_MLP::Wrapped_MLP(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Wrapped_MLP_CONTROL_BUS_s_axi_U = new Wrapped_MLP_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>("Wrapped_MLP_CONTROL_BUS_s_axi_U");
    Wrapped_MLP_CONTROL_BUS_s_axi_U->AWVALID(s_axi_CONTROL_BUS_AWVALID);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->AWREADY(s_axi_CONTROL_BUS_AWREADY);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->AWADDR(s_axi_CONTROL_BUS_AWADDR);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->WVALID(s_axi_CONTROL_BUS_WVALID);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->WREADY(s_axi_CONTROL_BUS_WREADY);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->WDATA(s_axi_CONTROL_BUS_WDATA);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->WSTRB(s_axi_CONTROL_BUS_WSTRB);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->ARVALID(s_axi_CONTROL_BUS_ARVALID);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->ARREADY(s_axi_CONTROL_BUS_ARREADY);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->ARADDR(s_axi_CONTROL_BUS_ARADDR);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->RVALID(s_axi_CONTROL_BUS_RVALID);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->RREADY(s_axi_CONTROL_BUS_RREADY);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->RDATA(s_axi_CONTROL_BUS_RDATA);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->RRESP(s_axi_CONTROL_BUS_RRESP);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->BVALID(s_axi_CONTROL_BUS_BVALID);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->BREADY(s_axi_CONTROL_BUS_BREADY);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->BRESP(s_axi_CONTROL_BUS_BRESP);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->ACLK(ap_clk);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->ap_start(ap_start);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->interrupt(interrupt);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->ap_ready(ap_ready);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->ap_done(ap_done);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->ap_idle(ap_idle);
    Wrapped_MLP_CONTROL_BUS_s_axi_U->ap_return(grp_MLP_fu_113_ap_return);
    pixels_U = new Wrapped_MLP_pixels("pixels_U");
    pixels_U->clk(ap_clk);
    pixels_U->reset(ap_rst_n_inv);
    pixels_U->address0(pixels_address0);
    pixels_U->ce0(pixels_ce0);
    pixels_U->we0(pixels_we0);
    pixels_U->d0(pixels_d0);
    pixels_U->q0(pixels_q0);
    grp_MLP_fu_113 = new MLP("grp_MLP_fu_113");
    grp_MLP_fu_113->ap_clk(ap_clk);
    grp_MLP_fu_113->ap_rst(ap_rst_n_inv);
    grp_MLP_fu_113->ap_start(grp_MLP_fu_113_ap_start);
    grp_MLP_fu_113->ap_done(grp_MLP_fu_113_ap_done);
    grp_MLP_fu_113->ap_idle(grp_MLP_fu_113_ap_idle);
    grp_MLP_fu_113->ap_ready(grp_MLP_fu_113_ap_ready);
    grp_MLP_fu_113->pixels_address0(grp_MLP_fu_113_pixels_address0);
    grp_MLP_fu_113->pixels_ce0(grp_MLP_fu_113_pixels_ce0);
    grp_MLP_fu_113->pixels_q0(pixels_q0);
    grp_MLP_fu_113->ap_return(grp_MLP_fu_113_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_INPUT_STREAM_TDATA_blk_n);
    sensitive << ( INPUT_STREAM_data_V_0_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_130_p2 );

    SC_METHOD(thread_INPUT_STREAM_TREADY);
    sensitive << ( INPUT_STREAM_dest_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_data_V_0_ack_in);
    sensitive << ( INPUT_STREAM_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_data_V_0_ack_out);
    sensitive << ( INPUT_STREAM_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_130_p2 );

    SC_METHOD(thread_INPUT_STREAM_data_V_0_data_out);
    sensitive << ( INPUT_STREAM_data_V_0_payload_A );
    sensitive << ( INPUT_STREAM_data_V_0_payload_B );
    sensitive << ( INPUT_STREAM_data_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_data_V_0_load_A);
    sensitive << ( INPUT_STREAM_data_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_data_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_data_V_0_load_B);
    sensitive << ( INPUT_STREAM_data_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_data_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_data_V_0_sel);
    sensitive << ( INPUT_STREAM_data_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_data_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_data_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_data_V_0_vld_out);
    sensitive << ( INPUT_STREAM_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_dest_V_0_ack_out);
    sensitive << ( INPUT_STREAM_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_130_p2 );

    SC_METHOD(thread_INPUT_STREAM_dest_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( INPUT_STREAM_data_V_0_vld_out );
    sensitive << ( exitcond_fu_130_p2 );

    SC_METHOD(thread_ap_block_state2_ignore_call0);
    sensitive << ( INPUT_STREAM_data_V_0_vld_out );
    sensitive << ( exitcond_fu_130_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_MLP_fu_113_ap_done );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_MLP_fu_113_ap_done );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond_fu_130_p2);
    sensitive << ( INPUT_STREAM_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_130_p2 );
    sensitive << ( i_reg_102 );

    SC_METHOD(thread_grp_MLP_fu_113_ap_start);
    sensitive << ( grp_MLP_fu_113_ap_start_reg );

    SC_METHOD(thread_i_1_fu_136_p2);
    sensitive << ( i_reg_102 );

    SC_METHOD(thread_pixels_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_130_p2 );
    sensitive << ( grp_MLP_fu_113_pixels_address0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_142_p1 );

    SC_METHOD(thread_pixels_ce0);
    sensitive << ( INPUT_STREAM_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_130_p2 );
    sensitive << ( grp_MLP_fu_113_pixels_ce0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_pixels_d0);
    sensitive << ( INPUT_STREAM_data_V_0_data_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_130_p2 );

    SC_METHOD(thread_pixels_we0);
    sensitive << ( INPUT_STREAM_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_130_p2 );

    SC_METHOD(thread_tmp_s_fu_142_p1);
    sensitive << ( i_reg_102 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_130_p2 );
    sensitive << ( grp_MLP_fu_113_ap_done );
    sensitive << ( ap_CS_fsm_state3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    INPUT_STREAM_data_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_data_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_data_V_0_state = "00";
    INPUT_STREAM_dest_V_0_state = "00";
    grp_MLP_fu_113_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Wrapped_MLP_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, INPUT_STREAM_TDATA, "(port)INPUT_STREAM_TDATA");
    sc_trace(mVcdFile, INPUT_STREAM_TVALID, "(port)INPUT_STREAM_TVALID");
    sc_trace(mVcdFile, INPUT_STREAM_TREADY, "(port)INPUT_STREAM_TREADY");
    sc_trace(mVcdFile, INPUT_STREAM_TKEEP, "(port)INPUT_STREAM_TKEEP");
    sc_trace(mVcdFile, INPUT_STREAM_TSTRB, "(port)INPUT_STREAM_TSTRB");
    sc_trace(mVcdFile, INPUT_STREAM_TUSER, "(port)INPUT_STREAM_TUSER");
    sc_trace(mVcdFile, INPUT_STREAM_TLAST, "(port)INPUT_STREAM_TLAST");
    sc_trace(mVcdFile, INPUT_STREAM_TID, "(port)INPUT_STREAM_TID");
    sc_trace(mVcdFile, INPUT_STREAM_TDEST, "(port)INPUT_STREAM_TDEST");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWVALID, "(port)s_axi_CONTROL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWREADY, "(port)s_axi_CONTROL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWADDR, "(port)s_axi_CONTROL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WVALID, "(port)s_axi_CONTROL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WREADY, "(port)s_axi_CONTROL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WDATA, "(port)s_axi_CONTROL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WSTRB, "(port)s_axi_CONTROL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARVALID, "(port)s_axi_CONTROL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARREADY, "(port)s_axi_CONTROL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARADDR, "(port)s_axi_CONTROL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RVALID, "(port)s_axi_CONTROL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RREADY, "(port)s_axi_CONTROL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RDATA, "(port)s_axi_CONTROL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RRESP, "(port)s_axi_CONTROL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BVALID, "(port)s_axi_CONTROL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BREADY, "(port)s_axi_CONTROL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BRESP, "(port)s_axi_CONTROL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, INPUT_STREAM_data_V_0_data_out, "INPUT_STREAM_data_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_data_V_0_vld_in, "INPUT_STREAM_data_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_data_V_0_vld_out, "INPUT_STREAM_data_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_data_V_0_ack_in, "INPUT_STREAM_data_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_data_V_0_ack_out, "INPUT_STREAM_data_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_data_V_0_payload_A, "INPUT_STREAM_data_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_data_V_0_payload_B, "INPUT_STREAM_data_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_data_V_0_sel_rd, "INPUT_STREAM_data_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_data_V_0_sel_wr, "INPUT_STREAM_data_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_data_V_0_sel, "INPUT_STREAM_data_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_data_V_0_load_A, "INPUT_STREAM_data_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_data_V_0_load_B, "INPUT_STREAM_data_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_data_V_0_state, "INPUT_STREAM_data_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_data_V_0_state_cmp_full, "INPUT_STREAM_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_dest_V_0_vld_in, "INPUT_STREAM_dest_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_dest_V_0_ack_out, "INPUT_STREAM_dest_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_dest_V_0_state, "INPUT_STREAM_dest_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_TDATA_blk_n, "INPUT_STREAM_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_130_p2, "exitcond_fu_130_p2");
    sc_trace(mVcdFile, i_1_fu_136_p2, "i_1_fu_136_p2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, pixels_address0, "pixels_address0");
    sc_trace(mVcdFile, pixels_ce0, "pixels_ce0");
    sc_trace(mVcdFile, pixels_we0, "pixels_we0");
    sc_trace(mVcdFile, pixels_d0, "pixels_d0");
    sc_trace(mVcdFile, pixels_q0, "pixels_q0");
    sc_trace(mVcdFile, grp_MLP_fu_113_ap_start, "grp_MLP_fu_113_ap_start");
    sc_trace(mVcdFile, grp_MLP_fu_113_ap_done, "grp_MLP_fu_113_ap_done");
    sc_trace(mVcdFile, grp_MLP_fu_113_ap_idle, "grp_MLP_fu_113_ap_idle");
    sc_trace(mVcdFile, grp_MLP_fu_113_ap_ready, "grp_MLP_fu_113_ap_ready");
    sc_trace(mVcdFile, grp_MLP_fu_113_pixels_address0, "grp_MLP_fu_113_pixels_address0");
    sc_trace(mVcdFile, grp_MLP_fu_113_pixels_ce0, "grp_MLP_fu_113_pixels_ce0");
    sc_trace(mVcdFile, grp_MLP_fu_113_ap_return, "grp_MLP_fu_113_ap_return");
    sc_trace(mVcdFile, i_reg_102, "i_reg_102");
    sc_trace(mVcdFile, grp_MLP_fu_113_ap_start_reg, "grp_MLP_fu_113_ap_start_reg");
    sc_trace(mVcdFile, ap_block_state2_ignore_call0, "ap_block_state2_ignore_call0");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_s_fu_142_p1, "tmp_s_fu_142_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_return, "ap_return");
#endif

    }
    mHdltvinHandle.open("Wrapped_MLP.hdltvin.dat");
    mHdltvoutHandle.open("Wrapped_MLP.hdltvout.dat");
}

Wrapped_MLP::~Wrapped_MLP() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Wrapped_MLP_CONTROL_BUS_s_axi_U;
    delete pixels_U;
    delete grp_MLP_fu_113;
}

void Wrapped_MLP::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Wrapped_MLP::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_data_V_0_vld_out.read()))) {
            INPUT_STREAM_data_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_data_V_0_ack_in.read()))) {
            INPUT_STREAM_data_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(INPUT_STREAM_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(INPUT_STREAM_data_V_0_state.read(), ap_const_lv2_2)))) {
            INPUT_STREAM_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_data_V_0_state.read(), ap_const_lv2_1)))) {
            INPUT_STREAM_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(INPUT_STREAM_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_data_V_0_ack_out.read()))))) {
            INPUT_STREAM_data_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_dest_V_0_state.read())))) {
            INPUT_STREAM_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_dest_V_0_state.read())))) {
            INPUT_STREAM_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_dest_V_0_ack_out.read()))))) {
            INPUT_STREAM_dest_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_MLP_fu_113_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_vld_out.read())) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_130_p2.read()))) {
            grp_MLP_fu_113_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_MLP_fu_113_ap_ready.read())) {
            grp_MLP_fu_113_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_vld_out.read())))) {
        i_reg_102 = i_1_fu_136_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_102 = ap_const_lv10_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_data_V_0_load_A.read())) {
        INPUT_STREAM_data_V_0_payload_A = INPUT_STREAM_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_data_V_0_load_B.read())) {
        INPUT_STREAM_data_V_0_payload_B = INPUT_STREAM_TDATA.read();
    }
}

void Wrapped_MLP::thread_INPUT_STREAM_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()))) {
        INPUT_STREAM_TDATA_blk_n = INPUT_STREAM_data_V_0_state.read()[0];
    } else {
        INPUT_STREAM_TDATA_blk_n = ap_const_logic_1;
    }
}

void Wrapped_MLP::thread_INPUT_STREAM_TREADY() {
    INPUT_STREAM_TREADY = INPUT_STREAM_dest_V_0_state.read()[1];
}

void Wrapped_MLP::thread_INPUT_STREAM_data_V_0_ack_in() {
    INPUT_STREAM_data_V_0_ack_in = INPUT_STREAM_data_V_0_state.read()[1];
}

void Wrapped_MLP::thread_INPUT_STREAM_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_vld_out.read())))) {
        INPUT_STREAM_data_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_data_V_0_ack_out = ap_const_logic_0;
    }
}

void Wrapped_MLP::thread_INPUT_STREAM_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_data_V_0_sel.read())) {
        INPUT_STREAM_data_V_0_data_out = INPUT_STREAM_data_V_0_payload_B.read();
    } else {
        INPUT_STREAM_data_V_0_data_out = INPUT_STREAM_data_V_0_payload_A.read();
    }
}

void Wrapped_MLP::thread_INPUT_STREAM_data_V_0_load_A() {
    INPUT_STREAM_data_V_0_load_A = (INPUT_STREAM_data_V_0_state_cmp_full.read() & ~INPUT_STREAM_data_V_0_sel_wr.read());
}

void Wrapped_MLP::thread_INPUT_STREAM_data_V_0_load_B() {
    INPUT_STREAM_data_V_0_load_B = (INPUT_STREAM_data_V_0_sel_wr.read() & INPUT_STREAM_data_V_0_state_cmp_full.read());
}

void Wrapped_MLP::thread_INPUT_STREAM_data_V_0_sel() {
    INPUT_STREAM_data_V_0_sel = INPUT_STREAM_data_V_0_sel_rd.read();
}

void Wrapped_MLP::thread_INPUT_STREAM_data_V_0_state_cmp_full() {
    INPUT_STREAM_data_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void Wrapped_MLP::thread_INPUT_STREAM_data_V_0_vld_in() {
    INPUT_STREAM_data_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void Wrapped_MLP::thread_INPUT_STREAM_data_V_0_vld_out() {
    INPUT_STREAM_data_V_0_vld_out = INPUT_STREAM_data_V_0_state.read()[0];
}

void Wrapped_MLP::thread_INPUT_STREAM_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_vld_out.read())))) {
        INPUT_STREAM_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void Wrapped_MLP::thread_INPUT_STREAM_dest_V_0_vld_in() {
    INPUT_STREAM_dest_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void Wrapped_MLP::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Wrapped_MLP::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Wrapped_MLP::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Wrapped_MLP::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_vld_out.read()));
}

void Wrapped_MLP::thread_ap_block_state2_ignore_call0() {
    ap_block_state2_ignore_call0 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_vld_out.read()));
}

void Wrapped_MLP::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(grp_MLP_fu_113_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Wrapped_MLP::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Wrapped_MLP::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(grp_MLP_fu_113_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Wrapped_MLP::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Wrapped_MLP::thread_exitcond_fu_130_p2() {
    exitcond_fu_130_p2 = (!i_reg_102.read().is_01() || !ap_const_lv10_310.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_102.read() == ap_const_lv10_310);
}

void Wrapped_MLP::thread_grp_MLP_fu_113_ap_start() {
    grp_MLP_fu_113_ap_start = grp_MLP_fu_113_ap_start_reg.read();
}

void Wrapped_MLP::thread_i_1_fu_136_p2() {
    i_1_fu_136_p2 = (!i_reg_102.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_102.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void Wrapped_MLP::thread_pixels_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()))) {
        pixels_address0 =  (sc_lv<10>) (tmp_s_fu_142_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        pixels_address0 = grp_MLP_fu_113_pixels_address0.read();
    } else {
        pixels_address0 = "XXXXXXXXXX";
    }
}

void Wrapped_MLP::thread_pixels_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_vld_out.read())))) {
        pixels_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        pixels_ce0 = grp_MLP_fu_113_pixels_ce0.read();
    } else {
        pixels_ce0 = ap_const_logic_0;
    }
}

void Wrapped_MLP::thread_pixels_d0() {
    pixels_d0 = INPUT_STREAM_data_V_0_data_out.read();
}

void Wrapped_MLP::thread_pixels_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_vld_out.read())))) {
        pixels_we0 = ap_const_logic_1;
    } else {
        pixels_we0 = ap_const_logic_0;
    }
}

void Wrapped_MLP::thread_tmp_s_fu_142_p1() {
    tmp_s_fu_142_p1 = esl_zext<64,10>(i_reg_102.read());
}

void Wrapped_MLP::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_vld_out.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_130_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_data_V_0_vld_out.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_130_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(grp_MLP_fu_113_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

void Wrapped_MLP::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TDATA\" :  \"" << INPUT_STREAM_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TVALID\" :  \"" << INPUT_STREAM_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"INPUT_STREAM_TREADY\" :  \"" << INPUT_STREAM_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TKEEP\" :  \"" << INPUT_STREAM_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TSTRB\" :  \"" << INPUT_STREAM_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TUSER\" :  \"" << INPUT_STREAM_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TLAST\" :  \"" << INPUT_STREAM_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TID\" :  \"" << INPUT_STREAM_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TDEST\" :  \"" << INPUT_STREAM_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWVALID\" :  \"" << s_axi_CONTROL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWREADY\" :  \"" << s_axi_CONTROL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWADDR\" :  \"" << s_axi_CONTROL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WVALID\" :  \"" << s_axi_CONTROL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_WREADY\" :  \"" << s_axi_CONTROL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WDATA\" :  \"" << s_axi_CONTROL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WSTRB\" :  \"" << s_axi_CONTROL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARVALID\" :  \"" << s_axi_CONTROL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARREADY\" :  \"" << s_axi_CONTROL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARADDR\" :  \"" << s_axi_CONTROL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RVALID\" :  \"" << s_axi_CONTROL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_RREADY\" :  \"" << s_axi_CONTROL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RDATA\" :  \"" << s_axi_CONTROL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RRESP\" :  \"" << s_axi_CONTROL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BVALID\" :  \"" << s_axi_CONTROL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_BREADY\" :  \"" << s_axi_CONTROL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BRESP\" :  \"" << s_axi_CONTROL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

