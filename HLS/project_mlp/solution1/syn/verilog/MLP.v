// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MLP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pixels_address0,
        pixels_ce0,
        pixels_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 176'd1;
parameter    ap_ST_fsm_state2 = 176'd2;
parameter    ap_ST_fsm_state3 = 176'd4;
parameter    ap_ST_fsm_state4 = 176'd8;
parameter    ap_ST_fsm_state5 = 176'd16;
parameter    ap_ST_fsm_state6 = 176'd32;
parameter    ap_ST_fsm_state7 = 176'd64;
parameter    ap_ST_fsm_state8 = 176'd128;
parameter    ap_ST_fsm_state9 = 176'd256;
parameter    ap_ST_fsm_state10 = 176'd512;
parameter    ap_ST_fsm_state11 = 176'd1024;
parameter    ap_ST_fsm_state12 = 176'd2048;
parameter    ap_ST_fsm_state13 = 176'd4096;
parameter    ap_ST_fsm_state14 = 176'd8192;
parameter    ap_ST_fsm_state15 = 176'd16384;
parameter    ap_ST_fsm_state16 = 176'd32768;
parameter    ap_ST_fsm_state17 = 176'd65536;
parameter    ap_ST_fsm_state18 = 176'd131072;
parameter    ap_ST_fsm_state19 = 176'd262144;
parameter    ap_ST_fsm_state20 = 176'd524288;
parameter    ap_ST_fsm_state21 = 176'd1048576;
parameter    ap_ST_fsm_state22 = 176'd2097152;
parameter    ap_ST_fsm_state23 = 176'd4194304;
parameter    ap_ST_fsm_state24 = 176'd8388608;
parameter    ap_ST_fsm_state25 = 176'd16777216;
parameter    ap_ST_fsm_state26 = 176'd33554432;
parameter    ap_ST_fsm_state27 = 176'd67108864;
parameter    ap_ST_fsm_state28 = 176'd134217728;
parameter    ap_ST_fsm_state29 = 176'd268435456;
parameter    ap_ST_fsm_state30 = 176'd536870912;
parameter    ap_ST_fsm_state31 = 176'd1073741824;
parameter    ap_ST_fsm_state32 = 176'd2147483648;
parameter    ap_ST_fsm_state33 = 176'd4294967296;
parameter    ap_ST_fsm_state34 = 176'd8589934592;
parameter    ap_ST_fsm_state35 = 176'd17179869184;
parameter    ap_ST_fsm_state36 = 176'd34359738368;
parameter    ap_ST_fsm_state37 = 176'd68719476736;
parameter    ap_ST_fsm_state38 = 176'd137438953472;
parameter    ap_ST_fsm_state39 = 176'd274877906944;
parameter    ap_ST_fsm_state40 = 176'd549755813888;
parameter    ap_ST_fsm_state41 = 176'd1099511627776;
parameter    ap_ST_fsm_state42 = 176'd2199023255552;
parameter    ap_ST_fsm_state43 = 176'd4398046511104;
parameter    ap_ST_fsm_state44 = 176'd8796093022208;
parameter    ap_ST_fsm_state45 = 176'd17592186044416;
parameter    ap_ST_fsm_state46 = 176'd35184372088832;
parameter    ap_ST_fsm_state47 = 176'd70368744177664;
parameter    ap_ST_fsm_state48 = 176'd140737488355328;
parameter    ap_ST_fsm_state49 = 176'd281474976710656;
parameter    ap_ST_fsm_state50 = 176'd562949953421312;
parameter    ap_ST_fsm_state51 = 176'd1125899906842624;
parameter    ap_ST_fsm_state52 = 176'd2251799813685248;
parameter    ap_ST_fsm_state53 = 176'd4503599627370496;
parameter    ap_ST_fsm_state54 = 176'd9007199254740992;
parameter    ap_ST_fsm_state55 = 176'd18014398509481984;
parameter    ap_ST_fsm_state56 = 176'd36028797018963968;
parameter    ap_ST_fsm_state57 = 176'd72057594037927936;
parameter    ap_ST_fsm_state58 = 176'd144115188075855872;
parameter    ap_ST_fsm_state59 = 176'd288230376151711744;
parameter    ap_ST_fsm_state60 = 176'd576460752303423488;
parameter    ap_ST_fsm_state61 = 176'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 176'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 176'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 176'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 176'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 176'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 176'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 176'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 176'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 176'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 176'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 176'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 176'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 176'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 176'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 176'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 176'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 176'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 176'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 176'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 176'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 176'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 176'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 176'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 176'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 176'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 176'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 176'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 176'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 176'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 176'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 176'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 176'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 176'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 176'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 176'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 176'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 176'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 176'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 176'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 176'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 176'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 176'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 176'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 176'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 176'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 176'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 176'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 176'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 176'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 176'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 176'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 176'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 176'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 176'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 176'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 176'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 176'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 176'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 176'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 176'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 176'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 176'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 176'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 176'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 176'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 176'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 176'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 176'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 176'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 176'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 176'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 176'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 176'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 176'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 176'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 176'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 176'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 176'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 176'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 176'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 176'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 176'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 176'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 176'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 176'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 176'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 176'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 176'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 176'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 176'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 176'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 176'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 176'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 176'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 176'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 176'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 176'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 176'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 176'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 176'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 176'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 176'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 176'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 176'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 176'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 176'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 176'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 176'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 176'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 176'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 176'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 176'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 176'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 176'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 176'd47890485652059026823698344598447161988085597568237568;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] pixels_address0;
output   pixels_ce0;
input  [31:0] pixels_q0;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg pixels_ce0;
reg[7:0] ap_return;

(* fsm_encoding = "none" *) reg   [175:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] WeightHidden1_address0;
reg    WeightHidden1_ce0;
wire   [31:0] WeightHidden1_q0;
wire   [5:0] BiasesHidden1_address0;
reg    BiasesHidden1_ce0;
wire   [31:0] BiasesHidden1_q0;
wire   [12:0] WeightHidden2_address0;
reg    WeightHidden2_ce0;
wire   [31:0] WeightHidden2_q0;
wire   [6:0] BiasesHidden2_address0;
reg    BiasesHidden2_ce0;
wire   [31:0] BiasesHidden2_q0;
wire   [10:0] WeightOut_address0;
reg    WeightOut_ce0;
wire   [31:0] WeightOut_q0;
wire   [3:0] BiasesOut_address0;
reg    BiasesOut_ce0;
wire   [31:0] BiasesOut_q0;
wire   [31:0] grp_fu_384_p2;
reg   [31:0] reg_420;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state121;
wire   [31:0] grp_fu_377_p2;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state125;
reg   [31:0] reg_432;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state130;
wire   [63:0] grp_fu_396_p1;
reg   [63:0] reg_436;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state131;
wire   [63:0] grp_fu_415_p2;
reg   [63:0] reg_441;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state144;
wire   [63:0] grp_fu_405_p2;
reg   [63:0] reg_446;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state149;
wire   [63:0] grp_fu_410_p2;
reg   [63:0] reg_451;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state171;
wire   [15:0] next_mul_fu_456_p2;
reg   [15:0] next_mul_reg_896;
wire    ap_CS_fsm_state2;
wire   [6:0] i_3_fu_468_p2;
reg   [6:0] i_3_reg_904;
wire   [63:0] tmp_fu_474_p1;
reg   [63:0] tmp_reg_909;
wire   [0:0] exitcond5_fu_462_p2;
wire   [9:0] j_3_fu_484_p2;
reg   [9:0] j_3_reg_918;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond4_fu_478_p2;
reg   [31:0] WeightHidden1_load_reg_938;
wire    ap_CS_fsm_state4;
reg   [31:0] pixels_load_reg_943;
reg   [31:0] BiasesHidden1_load_reg_948;
wire    ap_CS_fsm_state12;
wire   [7:0] i_4_fu_531_p2;
reg   [7:0] i_4_reg_956;
wire    ap_CS_fsm_state59;
wire   [63:0] tmp_s_fu_537_p1;
reg   [63:0] tmp_s_reg_961;
wire   [0:0] exitcond3_fu_525_p2;
wire   [14:0] tmp_36_cast_fu_549_p1;
reg   [14:0] tmp_36_cast_reg_967;
wire   [6:0] j_4_fu_559_p2;
reg   [6:0] j_4_reg_975;
wire    ap_CS_fsm_state60;
wire   [0:0] exitcond2_fu_553_p2;
reg   [31:0] WeightHidden2_load_reg_995;
wire    ap_CS_fsm_state61;
wire   [31:0] hiddenlayer1_q0;
reg   [31:0] hiddenlayer1_load_reg_1000;
reg   [31:0] BiasesHidden2_load_reg_1005;
wire    ap_CS_fsm_state69;
wire   [31:0] i_2_cast4_fu_599_p1;
reg   [31:0] i_2_cast4_reg_1010;
wire    ap_CS_fsm_state116;
wire   [3:0] i_5_fu_609_p2;
reg   [3:0] i_5_reg_1018;
wire   [63:0] tmp_2_fu_615_p1;
reg   [63:0] tmp_2_reg_1023;
wire   [0:0] exitcond1_fu_603_p2;
wire   [11:0] tmp_42_cast_fu_627_p1;
reg   [11:0] tmp_42_cast_reg_1028;
wire   [7:0] j_5_fu_759_p2;
reg   [7:0] j_5_reg_1036;
wire    ap_CS_fsm_state117;
wire   [0:0] exitcond_fu_753_p2;
reg   [31:0] WeightOut_load_reg_1056;
wire    ap_CS_fsm_state118;
wire   [31:0] hiddenlayer2_q0;
reg   [31:0] hiddenlayer2_load_reg_1061;
reg   [31:0] BiasesOut_load_reg_1066;
wire    ap_CS_fsm_state126;
wire   [31:0] grp_fu_391_p1;
reg   [31:0] aux_2_reg_1071;
wire    ap_CS_fsm_state172;
wire   [0:0] tmp_35_fu_877_p2;
reg   [0:0] tmp_35_reg_1076;
wire   [31:0] aux_1_fu_883_p3;
reg   [31:0] aux_1_reg_1082;
wire    ap_CS_fsm_state173;
wire   [31:0] posicion_mayor_1_fu_889_p3;
wire    ap_CS_fsm_state176;
reg   [5:0] hiddenlayer1_address0;
reg    hiddenlayer1_ce0;
reg    hiddenlayer1_we0;
reg   [6:0] hiddenlayer2_address0;
reg    hiddenlayer2_ce0;
reg    hiddenlayer2_we0;
reg   [6:0] i_reg_239;
wire    ap_CS_fsm_state58;
reg   [15:0] phi_mul_reg_250;
reg   [31:0] sumatorio_1_reg_262;
reg   [9:0] j_reg_274;
reg   [7:0] i_1_reg_285;
wire    ap_CS_fsm_state115;
reg   [31:0] sumatorio_3_reg_296;
reg   [6:0] j_1_reg_308;
reg   [31:0] aux_reg_319;
reg   [3:0] i_2_reg_331;
reg   [31:0] x_assign_reg_342;
reg   [31:0] sumatorio_5_reg_354;
reg   [7:0] j_2_reg_366;
wire   [63:0] tmp_37_cast_fu_505_p1;
wire   [63:0] tmp_9_fu_490_p1;
wire   [63:0] tmp_43_cast_fu_579_p1;
wire   [63:0] tmp_16_fu_565_p1;
wire   [63:0] tmp_44_cast_fu_779_p1;
wire   [63:0] tmp_24_fu_765_p1;
reg   [31:0] grp_fu_377_p0;
reg   [31:0] grp_fu_377_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state127;
reg   [31:0] grp_fu_384_p0;
reg   [31:0] grp_fu_384_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state119;
reg   [31:0] grp_fu_396_p0;
wire   [31:0] tmp_3_fu_520_p1;
wire   [31:0] tmp_10_fu_594_p1;
wire   [31:0] tmp_18_fu_794_p1;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state145;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state150;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state132;
wire   [15:0] tmp_9_cast_fu_495_p1;
wire   [15:0] tmp_26_fu_499_p2;
wire   [31:0] tmp_13_to_int_fu_510_p1;
wire   [31:0] tmp_13_neg_fu_514_p2;
wire   [13:0] tmp_23_fu_541_p3;
wire   [14:0] tmp_16_cast_fu_570_p1;
wire   [14:0] tmp_38_fu_574_p2;
wire   [31:0] tmp_23_to_int_fu_584_p1;
wire   [31:0] tmp_23_neg_fu_588_p2;
wire   [10:0] tmp_37_fu_619_p3;
wire   [31:0] p_Val2_s_fu_631_p1;
wire   [22:0] tmp_V_1_fu_645_p1;
wire   [24:0] mantissa_V_fu_649_p4;
wire   [7:0] tmp_V_fu_635_p4;
wire   [8:0] tmp_i_i_i_i_cast1_fu_663_p1;
wire   [8:0] sh_assign_fu_667_p2;
wire   [7:0] tmp_i_i_i_fu_681_p2;
wire   [0:0] isNeg_fu_673_p3;
wire  signed [8:0] tmp_i_i_i_cast_fu_687_p1;
wire  signed [8:0] ush_fu_691_p3;
wire  signed [31:0] sh_assign_2_cast_fu_699_p1;
wire  signed [24:0] sh_assign_2_cast_cas_fu_703_p1;
wire   [54:0] mantissa_V_1_cast2_fu_659_p1;
wire   [54:0] tmp_1_i_i_i_fu_707_p1;
wire   [24:0] r_V_fu_711_p2;
wire   [0:0] tmp_36_fu_723_p3;
wire   [54:0] r_V_1_fu_717_p2;
wire   [7:0] tmp_28_fu_731_p1;
wire   [7:0] tmp_30_fu_735_p4;
wire   [11:0] tmp_24_cast_fu_770_p1;
wire   [11:0] tmp_41_fu_774_p2;
wire   [31:0] tmp_31_to_int_fu_784_p1;
wire   [31:0] tmp_31_neg_fu_788_p2;
wire   [31:0] aux_2_to_int_fu_799_p1;
wire   [31:0] aux_to_int_fu_817_p1;
wire   [7:0] tmp_27_fu_803_p4;
wire   [22:0] tmp_39_fu_813_p1;
wire   [0:0] notrhs_fu_841_p2;
wire   [0:0] notlhs_fu_835_p2;
wire   [7:0] tmp_29_fu_821_p4;
wire   [22:0] tmp_40_fu_831_p1;
wire   [0:0] notrhs1_fu_859_p2;
wire   [0:0] notlhs9_fu_853_p2;
wire   [0:0] tmp_31_fu_847_p2;
wire   [0:0] tmp_32_fu_865_p2;
wire   [0:0] tmp_33_fu_871_p2;
wire   [0:0] tmp_34_fu_399_p2;
wire   [31:0] grp_fu_388_p1;
wire   [7:0] val_V_fu_745_p3;
reg   [7:0] ap_return_preg;
reg   [175:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 176'd1;
#0 ap_return_preg = 8'd0;
end

MLP_WeightHidden1 #(
    .DataWidth( 32 ),
    .AddressRange( 50176 ),
    .AddressWidth( 16 ))
WeightHidden1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(WeightHidden1_address0),
    .ce0(WeightHidden1_ce0),
    .q0(WeightHidden1_q0)
);

MLP_BiasesHidden1 #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
BiasesHidden1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(BiasesHidden1_address0),
    .ce0(BiasesHidden1_ce0),
    .q0(BiasesHidden1_q0)
);

MLP_WeightHidden2 #(
    .DataWidth( 32 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
WeightHidden2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(WeightHidden2_address0),
    .ce0(WeightHidden2_ce0),
    .q0(WeightHidden2_q0)
);

MLP_BiasesHidden2 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
BiasesHidden2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(BiasesHidden2_address0),
    .ce0(BiasesHidden2_ce0),
    .q0(BiasesHidden2_q0)
);

MLP_WeightOut #(
    .DataWidth( 32 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
WeightOut_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(WeightOut_address0),
    .ce0(WeightOut_ce0),
    .q0(WeightOut_q0)
);

MLP_BiasesOut #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
BiasesOut_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(BiasesOut_address0),
    .ce0(BiasesOut_ce0),
    .q0(BiasesOut_q0)
);

MLP_hiddenlayer1 #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
hiddenlayer1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(hiddenlayer1_address0),
    .ce0(hiddenlayer1_ce0),
    .we0(hiddenlayer1_we0),
    .d0(grp_fu_391_p1),
    .q0(hiddenlayer1_q0)
);

MLP_hiddenlayer2 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
hiddenlayer2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(hiddenlayer2_address0),
    .ce0(hiddenlayer2_ce0),
    .we0(hiddenlayer2_we0),
    .d0(grp_fu_391_p1),
    .q0(hiddenlayer2_q0)
);

Wrapped_MLP_fadd_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Wrapped_MLP_fadd_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_377_p0),
    .din1(grp_fu_377_p1),
    .ce(1'b1),
    .dout(grp_fu_377_p2)
);

Wrapped_MLP_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Wrapped_MLP_fmul_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_384_p0),
    .din1(grp_fu_384_p1),
    .ce(1'b1),
    .dout(grp_fu_384_p2)
);

Wrapped_MLP_sitofdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Wrapped_MLP_sitofdEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(i_2_cast4_reg_1010),
    .ce(1'b1),
    .dout(grp_fu_388_p1)
);

Wrapped_MLP_fptrueOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
Wrapped_MLP_fptrueOg_U4(
    .din0(reg_451),
    .dout(grp_fu_391_p1)
);

Wrapped_MLP_fpextfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
Wrapped_MLP_fpextfYi_U5(
    .din0(grp_fu_396_p0),
    .dout(grp_fu_396_p1)
);

Wrapped_MLP_fcmp_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Wrapped_MLP_fcmp_g8j_U6(
    .din0(grp_fu_391_p1),
    .din1(aux_reg_319),
    .opcode(5'd2),
    .dout(tmp_34_fu_399_p2)
);

Wrapped_MLP_dadd_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Wrapped_MLP_dadd_hbi_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_441),
    .din1(64'd4607182418800017408),
    .ce(1'b1),
    .dout(grp_fu_405_p2)
);

Wrapped_MLP_ddiv_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Wrapped_MLP_ddiv_ibs_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(reg_446),
    .ce(1'b1),
    .dout(grp_fu_410_p2)
);

Wrapped_MLP_dexp_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Wrapped_MLP_dexp_jbC_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_436),
    .ce(1'b1),
    .dout(grp_fu_415_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 8'd0;
    end else begin
        if (((exitcond1_fu_603_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state116))) begin
            ap_return_preg <= val_V_fu_745_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_525_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
        aux_reg_319 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state176)) begin
        aux_reg_319 <= aux_1_reg_1082;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_462_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_285 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        i_1_reg_285 <= i_4_reg_956;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_525_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
        i_2_reg_331 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state176)) begin
        i_2_reg_331 <= i_5_reg_1018;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        i_reg_239 <= i_3_reg_904;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_239 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_525_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state59))) begin
        j_1_reg_308 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        j_1_reg_308 <= j_4_reg_975;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_603_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state116))) begin
        j_2_reg_366 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state125)) begin
        j_2_reg_366 <= j_5_reg_1036;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_462_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_274 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_274 <= j_3_reg_918;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        phi_mul_reg_250 <= next_mul_reg_896;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_250 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_462_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sumatorio_1_reg_262 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sumatorio_1_reg_262 <= grp_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_525_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state59))) begin
        sumatorio_3_reg_296 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        sumatorio_3_reg_296 <= grp_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_603_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state116))) begin
        sumatorio_5_reg_354 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state125)) begin
        sumatorio_5_reg_354 <= grp_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_525_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
        x_assign_reg_342 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state176)) begin
        x_assign_reg_342 <= posicion_mayor_1_fu_889_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        BiasesHidden1_load_reg_948 <= BiasesHidden1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        BiasesHidden2_load_reg_1005 <= BiasesHidden2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state126)) begin
        BiasesOut_load_reg_1066 <= BiasesOut_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        WeightHidden1_load_reg_938 <= WeightHidden1_q0;
        pixels_load_reg_943 <= pixels_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        WeightHidden2_load_reg_995 <= WeightHidden2_q0;
        hiddenlayer1_load_reg_1000 <= hiddenlayer1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        WeightOut_load_reg_1056 <= WeightOut_q0;
        hiddenlayer2_load_reg_1061 <= hiddenlayer2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state173)) begin
        aux_1_reg_1082 <= aux_1_fu_883_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state172)) begin
        aux_2_reg_1071 <= grp_fu_391_p1;
        tmp_35_reg_1076 <= tmp_35_fu_877_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        i_2_cast4_reg_1010[3 : 0] <= i_2_cast4_fu_599_p1[3 : 0];
        i_5_reg_1018 <= i_5_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_904 <= i_3_fu_468_p2;
        next_mul_reg_896 <= next_mul_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        i_4_reg_956 <= i_4_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_3_reg_918 <= j_3_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        j_4_reg_975 <= j_4_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        j_5_reg_1036 <= j_5_fu_759_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_420 <= grp_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_432 <= grp_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_436 <= grp_fu_396_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_441 <= grp_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state35))) begin
        reg_446 <= grp_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state171) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state57))) begin
        reg_451 <= grp_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_603_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state116))) begin
        tmp_2_reg_1023[3 : 0] <= tmp_2_fu_615_p1[3 : 0];
        tmp_42_cast_reg_1028[10 : 7] <= tmp_42_cast_fu_627_p1[10 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_525_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state59))) begin
        tmp_36_cast_reg_967[13 : 6] <= tmp_36_cast_fu_549_p1[13 : 6];
        tmp_s_reg_961[7 : 0] <= tmp_s_fu_537_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_462_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_909[6 : 0] <= tmp_fu_474_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BiasesHidden1_ce0 = 1'b1;
    end else begin
        BiasesHidden1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        BiasesHidden2_ce0 = 1'b1;
    end else begin
        BiasesHidden2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        BiasesOut_ce0 = 1'b1;
    end else begin
        BiasesOut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        WeightHidden1_ce0 = 1'b1;
    end else begin
        WeightHidden1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        WeightHidden2_ce0 = 1'b1;
    end else begin
        WeightHidden2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        WeightOut_ce0 = 1'b1;
    end else begin
        WeightOut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond1_fu_603_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state116)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_603_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state116))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_603_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state116))) begin
        ap_return = val_V_fu_745_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state122))) begin
        grp_fu_377_p0 = sumatorio_5_reg_354;
    end else if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state65))) begin
        grp_fu_377_p0 = sumatorio_3_reg_296;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_377_p0 = sumatorio_1_reg_262;
    end else begin
        grp_fu_377_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state127)) begin
        grp_fu_377_p1 = BiasesOut_load_reg_1066;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_377_p1 = BiasesHidden2_load_reg_1005;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_377_p1 = BiasesHidden1_load_reg_948;
    end else if (((1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_377_p1 = reg_420;
    end else begin
        grp_fu_377_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        grp_fu_384_p0 = WeightOut_load_reg_1056;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_384_p0 = WeightHidden2_load_reg_995;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_384_p0 = WeightHidden1_load_reg_938;
    end else begin
        grp_fu_384_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        grp_fu_384_p1 = hiddenlayer2_load_reg_1061;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_384_p1 = hiddenlayer1_load_reg_1000;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_384_p1 = pixels_load_reg_943;
    end else begin
        grp_fu_384_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state131)) begin
        grp_fu_396_p0 = tmp_18_fu_794_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_396_p0 = tmp_10_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_396_p0 = tmp_3_fu_520_p1;
    end else begin
        grp_fu_396_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        hiddenlayer1_address0 = tmp_16_fu_565_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        hiddenlayer1_address0 = tmp_reg_909;
    end else begin
        hiddenlayer1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state60))) begin
        hiddenlayer1_ce0 = 1'b1;
    end else begin
        hiddenlayer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        hiddenlayer1_we0 = 1'b1;
    end else begin
        hiddenlayer1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        hiddenlayer2_address0 = tmp_24_fu_765_p1;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        hiddenlayer2_address0 = tmp_s_reg_961;
    end else begin
        hiddenlayer2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state117))) begin
        hiddenlayer2_ce0 = 1'b1;
    end else begin
        hiddenlayer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        hiddenlayer2_we0 = 1'b1;
    end else begin
        hiddenlayer2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        pixels_ce0 = 1'b1;
    end else begin
        pixels_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond5_fu_462_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond4_fu_478_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state59 : begin
            if (((exitcond3_fu_525_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((exitcond2_fu_553_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state116 : begin
            if (((exitcond1_fu_603_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state116))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end
        end
        ap_ST_fsm_state117 : begin
            if (((exitcond_fu_753_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state117))) begin
                ap_NS_fsm = ap_ST_fsm_state126;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BiasesHidden1_address0 = tmp_reg_909;

assign BiasesHidden2_address0 = tmp_s_reg_961;

assign BiasesOut_address0 = tmp_2_reg_1023;

assign WeightHidden1_address0 = tmp_37_cast_fu_505_p1;

assign WeightHidden2_address0 = tmp_43_cast_fu_579_p1;

assign WeightOut_address0 = tmp_44_cast_fu_779_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state171 = ap_CS_fsm[32'd170];

assign ap_CS_fsm_state172 = ap_CS_fsm[32'd171];

assign ap_CS_fsm_state173 = ap_CS_fsm[32'd172];

assign ap_CS_fsm_state176 = ap_CS_fsm[32'd175];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign aux_1_fu_883_p3 = ((tmp_35_reg_1076[0:0] === 1'b1) ? aux_2_reg_1071 : aux_reg_319);

assign aux_2_to_int_fu_799_p1 = grp_fu_391_p1;

assign aux_to_int_fu_817_p1 = aux_reg_319;

assign exitcond1_fu_603_p2 = ((i_2_reg_331 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond2_fu_553_p2 = ((j_1_reg_308 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond3_fu_525_p2 = ((i_1_reg_285 == 8'd128) ? 1'b1 : 1'b0);

assign exitcond4_fu_478_p2 = ((j_reg_274 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond5_fu_462_p2 = ((i_reg_239 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_fu_753_p2 = ((j_2_reg_366 == 8'd128) ? 1'b1 : 1'b0);

assign i_2_cast4_fu_599_p1 = i_2_reg_331;

assign i_3_fu_468_p2 = (i_reg_239 + 7'd1);

assign i_4_fu_531_p2 = (i_1_reg_285 + 8'd1);

assign i_5_fu_609_p2 = (i_2_reg_331 + 4'd1);

assign isNeg_fu_673_p3 = sh_assign_fu_667_p2[32'd8];

assign j_3_fu_484_p2 = (j_reg_274 + 10'd1);

assign j_4_fu_559_p2 = (j_1_reg_308 + 7'd1);

assign j_5_fu_759_p2 = (j_2_reg_366 + 8'd1);

assign mantissa_V_1_cast2_fu_659_p1 = mantissa_V_fu_649_p4;

assign mantissa_V_fu_649_p4 = {{{{1'd1}, {tmp_V_1_fu_645_p1}}}, {1'd0}};

assign next_mul_fu_456_p2 = (phi_mul_reg_250 + 16'd784);

assign notlhs9_fu_853_p2 = ((tmp_29_fu_821_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_835_p2 = ((tmp_27_fu_803_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_859_p2 = ((tmp_40_fu_831_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_841_p2 = ((tmp_39_fu_813_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_Val2_s_fu_631_p1 = x_assign_reg_342;

assign pixels_address0 = tmp_9_fu_490_p1;

assign posicion_mayor_1_fu_889_p3 = ((tmp_35_reg_1076[0:0] === 1'b1) ? grp_fu_388_p1 : x_assign_reg_342);

assign r_V_1_fu_717_p2 = mantissa_V_1_cast2_fu_659_p1 << tmp_1_i_i_i_fu_707_p1;

assign r_V_fu_711_p2 = mantissa_V_fu_649_p4 >> sh_assign_2_cast_cas_fu_703_p1;

assign sh_assign_2_cast_cas_fu_703_p1 = ush_fu_691_p3;

assign sh_assign_2_cast_fu_699_p1 = ush_fu_691_p3;

assign sh_assign_fu_667_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i_cast1_fu_663_p1));

assign tmp_10_fu_594_p1 = tmp_23_neg_fu_588_p2;

assign tmp_13_neg_fu_514_p2 = (tmp_13_to_int_fu_510_p1 ^ 32'd2147483648);

assign tmp_13_to_int_fu_510_p1 = reg_432;

assign tmp_16_cast_fu_570_p1 = j_1_reg_308;

assign tmp_16_fu_565_p1 = j_1_reg_308;

assign tmp_18_fu_794_p1 = tmp_31_neg_fu_788_p2;

assign tmp_1_i_i_i_fu_707_p1 = $unsigned(sh_assign_2_cast_fu_699_p1);

assign tmp_23_fu_541_p3 = {{i_1_reg_285}, {6'd0}};

assign tmp_23_neg_fu_588_p2 = (tmp_23_to_int_fu_584_p1 ^ 32'd2147483648);

assign tmp_23_to_int_fu_584_p1 = reg_432;

assign tmp_24_cast_fu_770_p1 = j_2_reg_366;

assign tmp_24_fu_765_p1 = j_2_reg_366;

assign tmp_26_fu_499_p2 = (phi_mul_reg_250 + tmp_9_cast_fu_495_p1);

assign tmp_27_fu_803_p4 = {{aux_2_to_int_fu_799_p1[30:23]}};

assign tmp_28_fu_731_p1 = tmp_36_fu_723_p3;

assign tmp_29_fu_821_p4 = {{aux_to_int_fu_817_p1[30:23]}};

assign tmp_2_fu_615_p1 = i_2_reg_331;

assign tmp_30_fu_735_p4 = {{r_V_1_fu_717_p2[31:24]}};

assign tmp_31_fu_847_p2 = (notrhs_fu_841_p2 | notlhs_fu_835_p2);

assign tmp_31_neg_fu_788_p2 = (tmp_31_to_int_fu_784_p1 ^ 32'd2147483648);

assign tmp_31_to_int_fu_784_p1 = reg_432;

assign tmp_32_fu_865_p2 = (notrhs1_fu_859_p2 | notlhs9_fu_853_p2);

assign tmp_33_fu_871_p2 = (tmp_32_fu_865_p2 & tmp_31_fu_847_p2);

assign tmp_35_fu_877_p2 = (tmp_34_fu_399_p2 & tmp_33_fu_871_p2);

assign tmp_36_cast_fu_549_p1 = tmp_23_fu_541_p3;

assign tmp_36_fu_723_p3 = r_V_fu_711_p2[32'd24];

assign tmp_37_cast_fu_505_p1 = tmp_26_fu_499_p2;

assign tmp_37_fu_619_p3 = {{i_2_reg_331}, {7'd0}};

assign tmp_38_fu_574_p2 = (tmp_36_cast_reg_967 + tmp_16_cast_fu_570_p1);

assign tmp_39_fu_813_p1 = aux_2_to_int_fu_799_p1[22:0];

assign tmp_3_fu_520_p1 = tmp_13_neg_fu_514_p2;

assign tmp_40_fu_831_p1 = aux_to_int_fu_817_p1[22:0];

assign tmp_41_fu_774_p2 = (tmp_42_cast_reg_1028 + tmp_24_cast_fu_770_p1);

assign tmp_42_cast_fu_627_p1 = tmp_37_fu_619_p3;

assign tmp_43_cast_fu_579_p1 = tmp_38_fu_574_p2;

assign tmp_44_cast_fu_779_p1 = tmp_41_fu_774_p2;

assign tmp_9_cast_fu_495_p1 = j_reg_274;

assign tmp_9_fu_490_p1 = j_reg_274;

assign tmp_V_1_fu_645_p1 = p_Val2_s_fu_631_p1[22:0];

assign tmp_V_fu_635_p4 = {{p_Val2_s_fu_631_p1[30:23]}};

assign tmp_fu_474_p1 = i_reg_239;

assign tmp_i_i_i_cast_fu_687_p1 = $signed(tmp_i_i_i_fu_681_p2);

assign tmp_i_i_i_fu_681_p2 = (8'd127 - tmp_V_fu_635_p4);

assign tmp_i_i_i_i_cast1_fu_663_p1 = tmp_V_fu_635_p4;

assign tmp_s_fu_537_p1 = i_1_reg_285;

assign ush_fu_691_p3 = ((isNeg_fu_673_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_687_p1 : sh_assign_fu_667_p2);

assign val_V_fu_745_p3 = ((isNeg_fu_673_p3[0:0] === 1'b1) ? tmp_28_fu_731_p1 : tmp_30_fu_735_p4);

always @ (posedge ap_clk) begin
    tmp_reg_909[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_s_reg_961[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    tmp_36_cast_reg_967[5:0] <= 6'b000000;
    tmp_36_cast_reg_967[14] <= 1'b0;
    i_2_cast4_reg_1010[31:4] <= 28'b0000000000000000000000000000;
    tmp_2_reg_1023[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_42_cast_reg_1028[6:0] <= 7'b0000000;
    tmp_42_cast_reg_1028[11] <= 1'b0;
end

endmodule //MLP
